1.adım ==> git unstaging staging kavramları nedir 
Git unstaging area working area daki ve tracking edilmeyen (git add yapılmamış) alanı ifade eder.
Git staging area da git add yapıldıktan sonra ve draft halindeki çalışmayı (daha repoya gönderilmemiş) ifade ediyor.

2.adım ==> Git config ayarlarını bakalım user.name ve user.email

git config --global -l :Bu komutla birlikte yapılan konfigürsayon ayarları gözükür. Çıktısı şu şekildedir:
user.name=wonka6
user.email=keskine96@gmail.com
alias.harita=log --all --graph --decorate --oneline

3. adım ==> git_code adında linux komutlarıyla dizin oluşturalım
mkdir gıt_code

4. adım ==> git_code dizine içinde data.txt dosyası oluşturalım 
touch data.txt

5. adım ==> git init yapalım
git init

6. adım ==> linux ve git adında 2 tane branch oluşturalım
git branch linux
git branch git

7. adım ==> linux branchine linux.txt dosyasının içine aklıma gelen linux komutları yazar her 2-3 satır sonunda add ve commit yapalım
gıt checkout linux
touch linux.txt
git add .
git commit -m "commit message"

8. adım ==> git branchine git.txt dosyasının içine aklıma gelen linux komutları yazar her 2-3 satır sonunda add ve commit yapalım
git checkout git
touch git.txt
git add .
git commit -m "commit message"

9. adım ==> GitHub için SSH-key oluşturarak GitHub push yapalım
ssh-keygen -t ed25519 -C "keskine96@gmail.com"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
git remote set-url origin git@github.com:Airties-Bootcamp-Patika/week-3-homework-1-wonka6.git

10. adım ==> git log --oneline --decorate  alias olarak bir isim verelim
git config --global alias.gorunum "log --oneline --decorate"

11. adım ==> .gitignore dosyası oluşturalım.  ve git tarafından takip edilmesini istemediğimiz secret adındaki dizini git ignore verelim
touch none_track_file.txt
cat >> .gittignore
git status
mv .gittignore .gitignore
git status
git add .
git commit -m "Add none_track.txt file for .gitignore"


13. adım ==> GitHub bir proje clone yapalımgit
git clone <git_repo>
 
14. adım ==> git log,git statusu sürekli kullanalım
git log
git status

15. adım ==> Tag versiyonalamada kullanalım
git tag v1.1

16. adım ==> GitHub branch açıp , pull request yapıp kendi localimizde pull yapalım
new_branch : bu isimde yeni bir branch olusturuldu github uzerinden
git pull
git checkout new_branch :
	Already on 'new_branch'
	Your branch is up to date with 'origin/new_branch'.




17. adım ==> en son durumda linux fast forward merge ile git branchini no-ff merge ile yapalım
git merge linux
Merge made by the 'recursive' strategy.
 linux.txt | 9 +++++++++
 1 file changed, 9 insertions(+)
 create mode 100644 linux.txt

git merge --no-ff git
CONFLICT (add/add): Merge conflict in week-3-homework-1-wonka6
Auto-merging week-3-homework-1-wonka6
Automatic merge failed; fix conflicts and then commit the result.

Yukarida belirtilen conflict git branch inde takip edilmeyen week-3-homework-1-wonka6 directory sinden oturu olusmus.
Ilk once git branch ine giderek commitledim daha sonra master branchinde merge islemini gerceklestirdim.

git merge --no-ff git
Merge made by the 'recursive' strategy.
 git.txt | 4 ++++
 1 file changed, 4 insertions(+)
 create mode 100644 git.txt

18. adım ==> branchlerimizi listelemek ,silmek v.b branch işlemleri yapalım
git branch list
git branch -d <branch_name>





